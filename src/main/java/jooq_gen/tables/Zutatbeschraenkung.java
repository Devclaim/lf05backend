/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.ZutatbeschraenkungRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Zutatbeschraenkung extends TableImpl<ZutatbeschraenkungRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.zutatbeschraenkung</code>
     */
    public static final Zutatbeschraenkung ZUTATBESCHRAENKUNG = new Zutatbeschraenkung();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZutatbeschraenkungRecord> getRecordType() {
        return ZutatbeschraenkungRecord.class;
    }

    /**
     * The column <code>public.zutatbeschraenkung.zutatnr</code>.
     */
    public final TableField<ZutatbeschraenkungRecord, Integer> ZUTATNR = createField(DSL.name("zutatnr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.zutatbeschraenkung.beschraenkungid</code>.
     */
    public final TableField<ZutatbeschraenkungRecord, Integer> BESCHRAENKUNGID = createField(DSL.name("beschraenkungid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Zutatbeschraenkung(Name alias, Table<ZutatbeschraenkungRecord> aliased) {
        this(alias, aliased, null);
    }

    private Zutatbeschraenkung(Name alias, Table<ZutatbeschraenkungRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.zutatbeschraenkung</code> table reference
     */
    public Zutatbeschraenkung(String alias) {
        this(DSL.name(alias), ZUTATBESCHRAENKUNG);
    }

    /**
     * Create an aliased <code>public.zutatbeschraenkung</code> table reference
     */
    public Zutatbeschraenkung(Name alias) {
        this(alias, ZUTATBESCHRAENKUNG);
    }

    /**
     * Create a <code>public.zutatbeschraenkung</code> table reference
     */
    public Zutatbeschraenkung() {
        this(DSL.name("zutatbeschraenkung"), null);
    }

    public <O extends Record> Zutatbeschraenkung(Table<O> child, ForeignKey<O, ZutatbeschraenkungRecord> key) {
        super(child, key, ZUTATBESCHRAENKUNG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<ZutatbeschraenkungRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ZUTATBESCHRAENKUNG__ZUTATBESCHRAENKUNG_ZUTATNR_FKEY, Keys.ZUTATBESCHRAENKUNG__ZUTATBESCHRAENKUNG_BESCHRAENKUNGID_FKEY);
    }

    private transient Zutat _zutat;
    private transient Beschraenkungen _beschraenkungen;

    /**
     * Get the implicit join path to the <code>public.zutat</code> table.
     */
    public Zutat zutat() {
        if (_zutat == null)
            _zutat = new Zutat(this, Keys.ZUTATBESCHRAENKUNG__ZUTATBESCHRAENKUNG_ZUTATNR_FKEY);

        return _zutat;
    }

    /**
     * Get the implicit join path to the <code>public.beschraenkungen</code>
     * table.
     */
    public Beschraenkungen beschraenkungen() {
        if (_beschraenkungen == null)
            _beschraenkungen = new Beschraenkungen(this, Keys.ZUTATBESCHRAENKUNG__ZUTATBESCHRAENKUNG_BESCHRAENKUNGID_FKEY);

        return _beschraenkungen;
    }

    @Override
    public Zutatbeschraenkung as(String alias) {
        return new Zutatbeschraenkung(DSL.name(alias), this);
    }

    @Override
    public Zutatbeschraenkung as(Name alias) {
        return new Zutatbeschraenkung(alias, this);
    }

    @Override
    public Zutatbeschraenkung as(Table<?> alias) {
        return new Zutatbeschraenkung(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Zutatbeschraenkung rename(String name) {
        return new Zutatbeschraenkung(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zutatbeschraenkung rename(Name name) {
        return new Zutatbeschraenkung(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zutatbeschraenkung rename(Table<?> name) {
        return new Zutatbeschraenkung(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
