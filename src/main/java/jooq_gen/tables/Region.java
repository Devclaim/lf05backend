/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.RegionRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Region extends TableImpl<RegionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.region</code>
     */
    public static final Region REGION = new Region();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegionRecord> getRecordType() {
        return RegionRecord.class;
    }

    /**
     * The column <code>public.region.regionid</code>.
     */
    public final TableField<RegionRecord, Integer> REGIONID = createField(DSL.name("regionid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.region.plz</code>.
     */
    public final TableField<RegionRecord, String> PLZ = createField(DSL.name("plz"), SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>public.region.ort</code>.
     */
    public final TableField<RegionRecord, String> ORT = createField(DSL.name("ort"), SQLDataType.VARCHAR(50), this, "");

    private Region(Name alias, Table<RegionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Region(Name alias, Table<RegionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.region</code> table reference
     */
    public Region(String alias) {
        this(DSL.name(alias), REGION);
    }

    /**
     * Create an aliased <code>public.region</code> table reference
     */
    public Region(Name alias) {
        this(alias, REGION);
    }

    /**
     * Create a <code>public.region</code> table reference
     */
    public Region() {
        this(DSL.name("region"), null);
    }

    public <O extends Record> Region(Table<O> child, ForeignKey<O, RegionRecord> key) {
        super(child, key, REGION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RegionRecord> getPrimaryKey() {
        return Keys.REGION_PKEY;
    }

    @Override
    public Region as(String alias) {
        return new Region(DSL.name(alias), this);
    }

    @Override
    public Region as(Name alias) {
        return new Region(alias, this);
    }

    @Override
    public Region as(Table<?> alias) {
        return new Region(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Region rename(String name) {
        return new Region(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Region rename(Name name) {
        return new Region(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Region rename(Table<?> name) {
        return new Region(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
