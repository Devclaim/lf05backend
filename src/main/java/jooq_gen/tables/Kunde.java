/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.KundeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kunde extends TableImpl<KundeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.kunde</code>
     */
    public static final Kunde KUNDE = new Kunde();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KundeRecord> getRecordType() {
        return KundeRecord.class;
    }

    /**
     * The column <code>public.kunde.kundennr</code>.
     */
    public final TableField<KundeRecord, Integer> KUNDENNR = createField(DSL.name("kundennr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.kunde.nachname</code>.
     */
    public final TableField<KundeRecord, String> NACHNAME = createField(DSL.name("nachname"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.kunde.vorname</code>.
     */
    public final TableField<KundeRecord, String> VORNAME = createField(DSL.name("vorname"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.kunde.geburtsdatum</code>.
     */
    public final TableField<KundeRecord, LocalDate> GEBURTSDATUM = createField(DSL.name("geburtsdatum"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.kunde.telefon</code>.
     */
    public final TableField<KundeRecord, String> TELEFON = createField(DSL.name("telefon"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.kunde.email</code>.
     */
    public final TableField<KundeRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.kunde.adressid</code>.
     */
    public final TableField<KundeRecord, Integer> ADRESSID = createField(DSL.name("adressid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Kunde(Name alias, Table<KundeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kunde(Name alias, Table<KundeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.kunde</code> table reference
     */
    public Kunde(String alias) {
        this(DSL.name(alias), KUNDE);
    }

    /**
     * Create an aliased <code>public.kunde</code> table reference
     */
    public Kunde(Name alias) {
        this(alias, KUNDE);
    }

    /**
     * Create a <code>public.kunde</code> table reference
     */
    public Kunde() {
        this(DSL.name("kunde"), null);
    }

    public <O extends Record> Kunde(Table<O> child, ForeignKey<O, KundeRecord> key) {
        super(child, key, KUNDE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<KundeRecord> getPrimaryKey() {
        return Keys.KUNDE_PKEY;
    }

    @Override
    public Kunde as(String alias) {
        return new Kunde(DSL.name(alias), this);
    }

    @Override
    public Kunde as(Name alias) {
        return new Kunde(alias, this);
    }

    @Override
    public Kunde as(Table<?> alias) {
        return new Kunde(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunde rename(String name) {
        return new Kunde(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunde rename(Name name) {
        return new Kunde(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunde rename(Table<?> name) {
        return new Kunde(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, LocalDate, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
