/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Public;
import jooq_gen.tables.records.GetrezeptebyzutateigenschaftRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getrezeptebyzutateigenschaft extends TableImpl<GetrezeptebyzutateigenschaftRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.getrezeptebyzutateigenschaft</code>
     */
    public static final Getrezeptebyzutateigenschaft GETREZEPTEBYZUTATEIGENSCHAFT = new Getrezeptebyzutateigenschaft();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetrezeptebyzutateigenschaftRecord> getRecordType() {
        return GetrezeptebyzutateigenschaftRecord.class;
    }

    /**
     * The column <code>public.getrezeptebyzutateigenschaft.rezeptnr</code>.
     */
    public final TableField<GetrezeptebyzutateigenschaftRecord, Integer> REZEPTNR = createField(DSL.name("rezeptnr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.getrezeptebyzutateigenschaft.rezeptname</code>.
     */
    public final TableField<GetrezeptebyzutateigenschaftRecord, String> REZEPTNAME = createField(DSL.name("rezeptname"), SQLDataType.VARCHAR(50), this, "");

    private Getrezeptebyzutateigenschaft(Name alias, Table<GetrezeptebyzutateigenschaftRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.VARCHAR)
        });
    }

    private Getrezeptebyzutateigenschaft(Name alias, Table<GetrezeptebyzutateigenschaftRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.getrezeptebyzutateigenschaft</code> table
     * reference
     */
    public Getrezeptebyzutateigenschaft(String alias) {
        this(DSL.name(alias), GETREZEPTEBYZUTATEIGENSCHAFT);
    }

    /**
     * Create an aliased <code>public.getrezeptebyzutateigenschaft</code> table
     * reference
     */
    public Getrezeptebyzutateigenschaft(Name alias) {
        this(alias, GETREZEPTEBYZUTATEIGENSCHAFT);
    }

    /**
     * Create a <code>public.getrezeptebyzutateigenschaft</code> table reference
     */
    public Getrezeptebyzutateigenschaft() {
        this(DSL.name("getrezeptebyzutateigenschaft"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Getrezeptebyzutateigenschaft as(String alias) {
        return new Getrezeptebyzutateigenschaft(DSL.name(alias), this, parameters);
    }

    @Override
    public Getrezeptebyzutateigenschaft as(Name alias) {
        return new Getrezeptebyzutateigenschaft(alias, this, parameters);
    }

    @Override
    public Getrezeptebyzutateigenschaft as(Table<?> alias) {
        return new Getrezeptebyzutateigenschaft(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getrezeptebyzutateigenschaft rename(String name) {
        return new Getrezeptebyzutateigenschaft(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getrezeptebyzutateigenschaft rename(Name name) {
        return new Getrezeptebyzutateigenschaft(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getrezeptebyzutateigenschaft rename(Table<?> name) {
        return new Getrezeptebyzutateigenschaft(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public Getrezeptebyzutateigenschaft call(
          String eigenschaftname
    ) {
        Getrezeptebyzutateigenschaft result = new Getrezeptebyzutateigenschaft(DSL.name("getrezeptebyzutateigenschaft"), null, new Field[] {
            DSL.val(eigenschaftname, SQLDataType.VARCHAR)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Getrezeptebyzutateigenschaft call(
          Field<String> eigenschaftname
    ) {
        Getrezeptebyzutateigenschaft result = new Getrezeptebyzutateigenschaft(DSL.name("getrezeptebyzutateigenschaft"), null, new Field[] {
            eigenschaftname
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
