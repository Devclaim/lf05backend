/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables.records;


import jooq_gen.tables.Region;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegionRecord extends UpdatableRecordImpl<RegionRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.region.regionid</code>.
     */
    public RegionRecord setRegionid(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.region.regionid</code>.
     */
    public Integer getRegionid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.region.plz</code>.
     */
    public RegionRecord setPlz(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.region.plz</code>.
     */
    public String getPlz() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.region.ort</code>.
     */
    public RegionRecord setOrt(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.region.ort</code>.
     */
    public String getOrt() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Region.REGION.REGIONID;
    }

    @Override
    public Field<String> field2() {
        return Region.REGION.PLZ;
    }

    @Override
    public Field<String> field3() {
        return Region.REGION.ORT;
    }

    @Override
    public Integer component1() {
        return getRegionid();
    }

    @Override
    public String component2() {
        return getPlz();
    }

    @Override
    public String component3() {
        return getOrt();
    }

    @Override
    public Integer value1() {
        return getRegionid();
    }

    @Override
    public String value2() {
        return getPlz();
    }

    @Override
    public String value3() {
        return getOrt();
    }

    @Override
    public RegionRecord value1(Integer value) {
        setRegionid(value);
        return this;
    }

    @Override
    public RegionRecord value2(String value) {
        setPlz(value);
        return this;
    }

    @Override
    public RegionRecord value3(String value) {
        setOrt(value);
        return this;
    }

    @Override
    public RegionRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RegionRecord
     */
    public RegionRecord() {
        super(Region.REGION);
    }

    /**
     * Create a detached, initialised RegionRecord
     */
    public RegionRecord(Integer regionid, String plz, String ort) {
        super(Region.REGION);

        setRegionid(regionid);
        setPlz(plz);
        setOrt(ort);
    }
}
