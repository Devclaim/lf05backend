/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.RezeptzutatRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rezeptzutat extends TableImpl<RezeptzutatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rezeptzutat</code>
     */
    public static final Rezeptzutat REZEPTZUTAT = new Rezeptzutat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RezeptzutatRecord> getRecordType() {
        return RezeptzutatRecord.class;
    }

    /**
     * The column <code>public.rezeptzutat.rezeptnr</code>.
     */
    public final TableField<RezeptzutatRecord, Integer> REZEPTNR = createField(DSL.name("rezeptnr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.rezeptzutat.zutatnr</code>.
     */
    public final TableField<RezeptzutatRecord, Integer> ZUTATNR = createField(DSL.name("zutatnr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.rezeptzutat.menge</code>.
     */
    public final TableField<RezeptzutatRecord, Integer> MENGE = createField(DSL.name("menge"), SQLDataType.INTEGER, this, "");

    private Rezeptzutat(Name alias, Table<RezeptzutatRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rezeptzutat(Name alias, Table<RezeptzutatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.rezeptzutat</code> table reference
     */
    public Rezeptzutat(String alias) {
        this(DSL.name(alias), REZEPTZUTAT);
    }

    /**
     * Create an aliased <code>public.rezeptzutat</code> table reference
     */
    public Rezeptzutat(Name alias) {
        this(alias, REZEPTZUTAT);
    }

    /**
     * Create a <code>public.rezeptzutat</code> table reference
     */
    public Rezeptzutat() {
        this(DSL.name("rezeptzutat"), null);
    }

    public <O extends Record> Rezeptzutat(Table<O> child, ForeignKey<O, RezeptzutatRecord> key) {
        super(child, key, REZEPTZUTAT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<RezeptzutatRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REZEPTZUTAT__REZEPTZUTAT_REZEPTNR_FKEY, Keys.REZEPTZUTAT__REZEPTZUTAT_ZUTATNR_FKEY);
    }

    private transient Rezept _rezept;
    private transient Zutat _zutat;

    /**
     * Get the implicit join path to the <code>public.rezept</code> table.
     */
    public Rezept rezept() {
        if (_rezept == null)
            _rezept = new Rezept(this, Keys.REZEPTZUTAT__REZEPTZUTAT_REZEPTNR_FKEY);

        return _rezept;
    }

    /**
     * Get the implicit join path to the <code>public.zutat</code> table.
     */
    public Zutat zutat() {
        if (_zutat == null)
            _zutat = new Zutat(this, Keys.REZEPTZUTAT__REZEPTZUTAT_ZUTATNR_FKEY);

        return _zutat;
    }

    @Override
    public Rezeptzutat as(String alias) {
        return new Rezeptzutat(DSL.name(alias), this);
    }

    @Override
    public Rezeptzutat as(Name alias) {
        return new Rezeptzutat(alias, this);
    }

    @Override
    public Rezeptzutat as(Table<?> alias) {
        return new Rezeptzutat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rezeptzutat rename(String name) {
        return new Rezeptzutat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rezeptzutat rename(Name name) {
        return new Rezeptzutat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rezeptzutat rename(Table<?> name) {
        return new Rezeptzutat(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
