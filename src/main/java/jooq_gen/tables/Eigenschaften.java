/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.EigenschaftenRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Eigenschaften extends TableImpl<EigenschaftenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eigenschaften</code>
     */
    public static final Eigenschaften EIGENSCHAFTEN = new Eigenschaften();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EigenschaftenRecord> getRecordType() {
        return EigenschaftenRecord.class;
    }

    /**
     * The column <code>public.eigenschaften.eigenschaftid</code>.
     */
    public final TableField<EigenschaftenRecord, Integer> EIGENSCHAFTID = createField(DSL.name("eigenschaftid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.eigenschaften.bezeichnung</code>.
     */
    public final TableField<EigenschaftenRecord, String> BEZEICHNUNG = createField(DSL.name("bezeichnung"), SQLDataType.VARCHAR(50), this, "");

    private Eigenschaften(Name alias, Table<EigenschaftenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Eigenschaften(Name alias, Table<EigenschaftenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eigenschaften</code> table reference
     */
    public Eigenschaften(String alias) {
        this(DSL.name(alias), EIGENSCHAFTEN);
    }

    /**
     * Create an aliased <code>public.eigenschaften</code> table reference
     */
    public Eigenschaften(Name alias) {
        this(alias, EIGENSCHAFTEN);
    }

    /**
     * Create a <code>public.eigenschaften</code> table reference
     */
    public Eigenschaften() {
        this(DSL.name("eigenschaften"), null);
    }

    public <O extends Record> Eigenschaften(Table<O> child, ForeignKey<O, EigenschaftenRecord> key) {
        super(child, key, EIGENSCHAFTEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EigenschaftenRecord> getPrimaryKey() {
        return Keys.EIGENSCHAFTEN_PKEY;
    }

    @Override
    public Eigenschaften as(String alias) {
        return new Eigenschaften(DSL.name(alias), this);
    }

    @Override
    public Eigenschaften as(Name alias) {
        return new Eigenschaften(alias, this);
    }

    @Override
    public Eigenschaften as(Table<?> alias) {
        return new Eigenschaften(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Eigenschaften rename(String name) {
        return new Eigenschaften(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Eigenschaften rename(Name name) {
        return new Eigenschaften(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Eigenschaften rename(Table<?> name) {
        return new Eigenschaften(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
