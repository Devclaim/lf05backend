/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.BeschraenkungenRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Beschraenkungen extends TableImpl<BeschraenkungenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.beschraenkungen</code>
     */
    public static final Beschraenkungen BESCHRAENKUNGEN = new Beschraenkungen();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BeschraenkungenRecord> getRecordType() {
        return BeschraenkungenRecord.class;
    }

    /**
     * The column <code>public.beschraenkungen.beschraenkungid</code>.
     */
    public final TableField<BeschraenkungenRecord, Integer> BESCHRAENKUNGID = createField(DSL.name("beschraenkungid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.beschraenkungen.beschreibung</code>.
     */
    public final TableField<BeschraenkungenRecord, String> BESCHREIBUNG = createField(DSL.name("beschreibung"), SQLDataType.VARCHAR(50), this, "");

    private Beschraenkungen(Name alias, Table<BeschraenkungenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Beschraenkungen(Name alias, Table<BeschraenkungenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.beschraenkungen</code> table reference
     */
    public Beschraenkungen(String alias) {
        this(DSL.name(alias), BESCHRAENKUNGEN);
    }

    /**
     * Create an aliased <code>public.beschraenkungen</code> table reference
     */
    public Beschraenkungen(Name alias) {
        this(alias, BESCHRAENKUNGEN);
    }

    /**
     * Create a <code>public.beschraenkungen</code> table reference
     */
    public Beschraenkungen() {
        this(DSL.name("beschraenkungen"), null);
    }

    public <O extends Record> Beschraenkungen(Table<O> child, ForeignKey<O, BeschraenkungenRecord> key) {
        super(child, key, BESCHRAENKUNGEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BeschraenkungenRecord> getPrimaryKey() {
        return Keys.BESCHRAENKUNGEN_PKEY;
    }

    @Override
    public Beschraenkungen as(String alias) {
        return new Beschraenkungen(DSL.name(alias), this);
    }

    @Override
    public Beschraenkungen as(Name alias) {
        return new Beschraenkungen(alias, this);
    }

    @Override
    public Beschraenkungen as(Table<?> alias) {
        return new Beschraenkungen(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Beschraenkungen rename(String name) {
        return new Beschraenkungen(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beschraenkungen rename(Name name) {
        return new Beschraenkungen(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beschraenkungen rename(Table<?> name) {
        return new Beschraenkungen(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
