/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.LieferantRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lieferant extends TableImpl<LieferantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lieferant</code>
     */
    public static final Lieferant LIEFERANT = new Lieferant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LieferantRecord> getRecordType() {
        return LieferantRecord.class;
    }

    /**
     * The column <code>public.lieferant.lieferantennr</code>.
     */
    public final TableField<LieferantRecord, Integer> LIEFERANTENNR = createField(DSL.name("lieferantennr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lieferant.lieferantenname</code>.
     */
    public final TableField<LieferantRecord, String> LIEFERANTENNAME = createField(DSL.name("lieferantenname"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lieferant.telefon</code>.
     */
    public final TableField<LieferantRecord, String> TELEFON = createField(DSL.name("telefon"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.lieferant.email</code>.
     */
    public final TableField<LieferantRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lieferant.adressid</code>.
     */
    public final TableField<LieferantRecord, Integer> ADRESSID = createField(DSL.name("adressid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Lieferant(Name alias, Table<LieferantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lieferant(Name alias, Table<LieferantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lieferant</code> table reference
     */
    public Lieferant(String alias) {
        this(DSL.name(alias), LIEFERANT);
    }

    /**
     * Create an aliased <code>public.lieferant</code> table reference
     */
    public Lieferant(Name alias) {
        this(alias, LIEFERANT);
    }

    /**
     * Create a <code>public.lieferant</code> table reference
     */
    public Lieferant() {
        this(DSL.name("lieferant"), null);
    }

    public <O extends Record> Lieferant(Table<O> child, ForeignKey<O, LieferantRecord> key) {
        super(child, key, LIEFERANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LieferantRecord> getPrimaryKey() {
        return Keys.LIEFERANT_PKEY;
    }

    @Override
    public List<ForeignKey<LieferantRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LIEFERANT__LIEFERANT_ADRESSID_FKEY);
    }

    private transient Adresse _adresse;

    /**
     * Get the implicit join path to the <code>public.adresse</code> table.
     */
    public Adresse adresse() {
        if (_adresse == null)
            _adresse = new Adresse(this, Keys.LIEFERANT__LIEFERANT_ADRESSID_FKEY);

        return _adresse;
    }

    @Override
    public Lieferant as(String alias) {
        return new Lieferant(DSL.name(alias), this);
    }

    @Override
    public Lieferant as(Name alias) {
        return new Lieferant(alias, this);
    }

    @Override
    public Lieferant as(Table<?> alias) {
        return new Lieferant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lieferant rename(String name) {
        return new Lieferant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lieferant rename(Name name) {
        return new Lieferant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lieferant rename(Table<?> name) {
        return new Lieferant(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
