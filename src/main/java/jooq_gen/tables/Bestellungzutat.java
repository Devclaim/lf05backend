/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.BestellungzutatRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bestellungzutat extends TableImpl<BestellungzutatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bestellungzutat</code>
     */
    public static final Bestellungzutat BESTELLUNGZUTAT = new Bestellungzutat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BestellungzutatRecord> getRecordType() {
        return BestellungzutatRecord.class;
    }

    /**
     * The column <code>public.bestellungzutat.bestellnr</code>.
     */
    public final TableField<BestellungzutatRecord, Integer> BESTELLNR = createField(DSL.name("bestellnr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.bestellungzutat.zutatnr</code>.
     */
    public final TableField<BestellungzutatRecord, Integer> ZUTATNR = createField(DSL.name("zutatnr"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bestellungzutat.menge</code>.
     */
    public final TableField<BestellungzutatRecord, Integer> MENGE = createField(DSL.name("menge"), SQLDataType.INTEGER, this, "");

    private Bestellungzutat(Name alias, Table<BestellungzutatRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bestellungzutat(Name alias, Table<BestellungzutatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bestellungzutat</code> table reference
     */
    public Bestellungzutat(String alias) {
        this(DSL.name(alias), BESTELLUNGZUTAT);
    }

    /**
     * Create an aliased <code>public.bestellungzutat</code> table reference
     */
    public Bestellungzutat(Name alias) {
        this(alias, BESTELLUNGZUTAT);
    }

    /**
     * Create a <code>public.bestellungzutat</code> table reference
     */
    public Bestellungzutat() {
        this(DSL.name("bestellungzutat"), null);
    }

    public <O extends Record> Bestellungzutat(Table<O> child, ForeignKey<O, BestellungzutatRecord> key) {
        super(child, key, BESTELLUNGZUTAT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<BestellungzutatRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BESTELLUNGZUTAT__BESTELLUNGZUTAT_BESTELLNR_FKEY, Keys.BESTELLUNGZUTAT__BESTELLUNGZUTAT_ZUTATNR_FKEY);
    }

    private transient Bestellung _bestellung;
    private transient Zutat _zutat;

    /**
     * Get the implicit join path to the <code>public.bestellung</code> table.
     */
    public Bestellung bestellung() {
        if (_bestellung == null)
            _bestellung = new Bestellung(this, Keys.BESTELLUNGZUTAT__BESTELLUNGZUTAT_BESTELLNR_FKEY);

        return _bestellung;
    }

    /**
     * Get the implicit join path to the <code>public.zutat</code> table.
     */
    public Zutat zutat() {
        if (_zutat == null)
            _zutat = new Zutat(this, Keys.BESTELLUNGZUTAT__BESTELLUNGZUTAT_ZUTATNR_FKEY);

        return _zutat;
    }

    @Override
    public Bestellungzutat as(String alias) {
        return new Bestellungzutat(DSL.name(alias), this);
    }

    @Override
    public Bestellungzutat as(Name alias) {
        return new Bestellungzutat(alias, this);
    }

    @Override
    public Bestellungzutat as(Table<?> alias) {
        return new Bestellungzutat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bestellungzutat rename(String name) {
        return new Bestellungzutat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bestellungzutat rename(Name name) {
        return new Bestellungzutat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bestellungzutat rename(Table<?> name) {
        return new Bestellungzutat(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
