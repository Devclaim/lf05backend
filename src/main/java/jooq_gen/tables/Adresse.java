/*
 * This file is generated by jOOQ.
 */
package jooq_gen.tables;


import jooq_gen.Keys;
import jooq_gen.Public;
import jooq_gen.tables.records.AdresseRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adresse extends TableImpl<AdresseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.adresse</code>
     */
    public static final Adresse ADRESSE = new Adresse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdresseRecord> getRecordType() {
        return AdresseRecord.class;
    }

    /**
     * The column <code>public.adresse.adressid</code>.
     */
    public final TableField<AdresseRecord, Integer> ADRESSID = createField(DSL.name("adressid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.adresse.strasse</code>.
     */
    public final TableField<AdresseRecord, String> STRASSE = createField(DSL.name("strasse"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.adresse.hausnr</code>.
     */
    public final TableField<AdresseRecord, String> HAUSNR = createField(DSL.name("hausnr"), SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>public.adresse.regionid</code>.
     */
    public final TableField<AdresseRecord, Integer> REGIONID = createField(DSL.name("regionid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Adresse(Name alias, Table<AdresseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Adresse(Name alias, Table<AdresseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.adresse</code> table reference
     */
    public Adresse(String alias) {
        this(DSL.name(alias), ADRESSE);
    }

    /**
     * Create an aliased <code>public.adresse</code> table reference
     */
    public Adresse(Name alias) {
        this(alias, ADRESSE);
    }

    /**
     * Create a <code>public.adresse</code> table reference
     */
    public Adresse() {
        this(DSL.name("adresse"), null);
    }

    public <O extends Record> Adresse(Table<O> child, ForeignKey<O, AdresseRecord> key) {
        super(child, key, ADRESSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AdresseRecord> getPrimaryKey() {
        return Keys.ADRESSE_PKEY;
    }

    @Override
    public List<ForeignKey<AdresseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ADRESSE__ADRESSE_REGIONID_FKEY);
    }

    private transient Region _region;

    /**
     * Get the implicit join path to the <code>public.region</code> table.
     */
    public Region region() {
        if (_region == null)
            _region = new Region(this, Keys.ADRESSE__ADRESSE_REGIONID_FKEY);

        return _region;
    }

    @Override
    public Adresse as(String alias) {
        return new Adresse(DSL.name(alias), this);
    }

    @Override
    public Adresse as(Name alias) {
        return new Adresse(alias, this);
    }

    @Override
    public Adresse as(Table<?> alias) {
        return new Adresse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adresse rename(String name) {
        return new Adresse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adresse rename(Name name) {
        return new Adresse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adresse rename(Table<?> name) {
        return new Adresse(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
