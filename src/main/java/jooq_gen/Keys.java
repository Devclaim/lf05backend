/*
 * This file is generated by jOOQ.
 */
package jooq_gen;


import jooq_gen.tables.*;
import jooq_gen.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdresseRecord> ADRESSE_PKEY = Internal.createUniqueKey(Adresse.ADRESSE, DSL.name("adresse_pkey"), new TableField[] { Adresse.ADRESSE.ADRESSID }, true);
    public static final UniqueKey<BeschraenkungenRecord> BESCHRAENKUNGEN_PKEY = Internal.createUniqueKey(Beschraenkungen.BESCHRAENKUNGEN, DSL.name("beschraenkungen_pkey"), new TableField[] { Beschraenkungen.BESCHRAENKUNGEN.BESCHRAENKUNGID }, true);
    public static final UniqueKey<BestellungRecord> BESTELLUNG_PKEY = Internal.createUniqueKey(Bestellung.BESTELLUNG, DSL.name("bestellung_pkey"), new TableField[] { Bestellung.BESTELLUNG.BESTELLNR }, true);
    public static final UniqueKey<EigenschaftenRecord> EIGENSCHAFTEN_PKEY = Internal.createUniqueKey(Eigenschaften.EIGENSCHAFTEN, DSL.name("eigenschaften_pkey"), new TableField[] { Eigenschaften.EIGENSCHAFTEN.EIGENSCHAFTID }, true);
    public static final UniqueKey<KundeRecord> KUNDE_PKEY = Internal.createUniqueKey(Kunde.KUNDE, DSL.name("kunde_pkey"), new TableField[] { Kunde.KUNDE.KUNDENNR }, true);
    public static final UniqueKey<LieferantRecord> LIEFERANT_PKEY = Internal.createUniqueKey(Lieferant.LIEFERANT, DSL.name("lieferant_pkey"), new TableField[] { Lieferant.LIEFERANT.LIEFERANTENNR }, true);
    public static final UniqueKey<RegionRecord> REGION_PKEY = Internal.createUniqueKey(Region.REGION, DSL.name("region_pkey"), new TableField[] { Region.REGION.REGIONID }, true);
    public static final UniqueKey<RezeptRecord> REZEPT_PKEY = Internal.createUniqueKey(Rezept.REZEPT, DSL.name("rezept_pkey"), new TableField[] { Rezept.REZEPT.REZEPTNR }, true);
    public static final UniqueKey<ZutatRecord> ZUTAT_PKEY = Internal.createUniqueKey(Zutat.ZUTAT, DSL.name("zutat_pkey"), new TableField[] { Zutat.ZUTAT.ZUTATNR }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AdresseRecord, RegionRecord> ADRESSE__ADRESSE_REGIONID_FKEY = Internal.createForeignKey(Adresse.ADRESSE, DSL.name("adresse_regionid_fkey"), new TableField[] { Adresse.ADRESSE.REGIONID }, Keys.REGION_PKEY, new TableField[] { Region.REGION.REGIONID }, true);
    public static final ForeignKey<BestellungskundeRecord, BestellungRecord> BESTELLUNGSKUNDE__BESTELLUNGSKUNDE_BESTELLNR_FKEY = Internal.createForeignKey(Bestellungskunde.BESTELLUNGSKUNDE, DSL.name("bestellungskunde_bestellnr_fkey"), new TableField[] { Bestellungskunde.BESTELLUNGSKUNDE.BESTELLNR }, Keys.BESTELLUNG_PKEY, new TableField[] { Bestellung.BESTELLUNG.BESTELLNR }, true);
    public static final ForeignKey<BestellungskundeRecord, KundeRecord> BESTELLUNGSKUNDE__BESTELLUNGSKUNDE_KUNDENNR_FKEY = Internal.createForeignKey(Bestellungskunde.BESTELLUNGSKUNDE, DSL.name("bestellungskunde_kundennr_fkey"), new TableField[] { Bestellungskunde.BESTELLUNGSKUNDE.KUNDENNR }, Keys.KUNDE_PKEY, new TableField[] { Kunde.KUNDE.KUNDENNR }, true);
    public static final ForeignKey<BestellungsrezeptRecord, BestellungRecord> BESTELLUNGSREZEPT__BESTELLUNGSREZEPT_BESTELLNR_FKEY = Internal.createForeignKey(Bestellungsrezept.BESTELLUNGSREZEPT, DSL.name("bestellungsrezept_bestellnr_fkey"), new TableField[] { Bestellungsrezept.BESTELLUNGSREZEPT.BESTELLNR }, Keys.BESTELLUNG_PKEY, new TableField[] { Bestellung.BESTELLUNG.BESTELLNR }, true);
    public static final ForeignKey<BestellungsrezeptRecord, RezeptRecord> BESTELLUNGSREZEPT__BESTELLUNGSREZEPT_REZEPTNR_FKEY = Internal.createForeignKey(Bestellungsrezept.BESTELLUNGSREZEPT, DSL.name("bestellungsrezept_rezeptnr_fkey"), new TableField[] { Bestellungsrezept.BESTELLUNGSREZEPT.REZEPTNR }, Keys.REZEPT_PKEY, new TableField[] { Rezept.REZEPT.REZEPTNR }, true);
    public static final ForeignKey<BestellungzutatRecord, BestellungRecord> BESTELLUNGZUTAT__BESTELLUNGZUTAT_BESTELLNR_FKEY = Internal.createForeignKey(Bestellungzutat.BESTELLUNGZUTAT, DSL.name("bestellungzutat_bestellnr_fkey"), new TableField[] { Bestellungzutat.BESTELLUNGZUTAT.BESTELLNR }, Keys.BESTELLUNG_PKEY, new TableField[] { Bestellung.BESTELLUNG.BESTELLNR }, true);
    public static final ForeignKey<BestellungzutatRecord, ZutatRecord> BESTELLUNGZUTAT__BESTELLUNGZUTAT_ZUTATNR_FKEY = Internal.createForeignKey(Bestellungzutat.BESTELLUNGZUTAT, DSL.name("bestellungzutat_zutatnr_fkey"), new TableField[] { Bestellungzutat.BESTELLUNGZUTAT.ZUTATNR }, Keys.ZUTAT_PKEY, new TableField[] { Zutat.ZUTAT.ZUTATNR }, true);
    public static final ForeignKey<LieferantRecord, AdresseRecord> LIEFERANT__LIEFERANT_ADRESSID_FKEY = Internal.createForeignKey(Lieferant.LIEFERANT, DSL.name("lieferant_adressid_fkey"), new TableField[] { Lieferant.LIEFERANT.ADRESSID }, Keys.ADRESSE_PKEY, new TableField[] { Adresse.ADRESSE.ADRESSID }, true);
    public static final ForeignKey<RezeptzutatRecord, RezeptRecord> REZEPTZUTAT__REZEPTZUTAT_REZEPTNR_FKEY = Internal.createForeignKey(Rezeptzutat.REZEPTZUTAT, DSL.name("rezeptzutat_rezeptnr_fkey"), new TableField[] { Rezeptzutat.REZEPTZUTAT.REZEPTNR }, Keys.REZEPT_PKEY, new TableField[] { Rezept.REZEPT.REZEPTNR }, true);
    public static final ForeignKey<RezeptzutatRecord, ZutatRecord> REZEPTZUTAT__REZEPTZUTAT_ZUTATNR_FKEY = Internal.createForeignKey(Rezeptzutat.REZEPTZUTAT, DSL.name("rezeptzutat_zutatnr_fkey"), new TableField[] { Rezeptzutat.REZEPTZUTAT.ZUTATNR }, Keys.ZUTAT_PKEY, new TableField[] { Zutat.ZUTAT.ZUTATNR }, true);
    public static final ForeignKey<ZutatRecord, LieferantRecord> ZUTAT__ZUTAT_LIEFERANTENNR_FKEY = Internal.createForeignKey(Zutat.ZUTAT, DSL.name("zutat_lieferantennr_fkey"), new TableField[] { Zutat.ZUTAT.LIEFERANTENNR }, Keys.LIEFERANT_PKEY, new TableField[] { Lieferant.LIEFERANT.LIEFERANTENNR }, true);
    public static final ForeignKey<ZutatbeschraenkungRecord, BeschraenkungenRecord> ZUTATBESCHRAENKUNG__ZUTATBESCHRAENKUNG_BESCHRAENKUNGID_FKEY = Internal.createForeignKey(Zutatbeschraenkung.ZUTATBESCHRAENKUNG, DSL.name("zutatbeschraenkung_beschraenkungid_fkey"), new TableField[] { Zutatbeschraenkung.ZUTATBESCHRAENKUNG.BESCHRAENKUNGID }, Keys.BESCHRAENKUNGEN_PKEY, new TableField[] { Beschraenkungen.BESCHRAENKUNGEN.BESCHRAENKUNGID }, true);
    public static final ForeignKey<ZutatbeschraenkungRecord, ZutatRecord> ZUTATBESCHRAENKUNG__ZUTATBESCHRAENKUNG_ZUTATNR_FKEY = Internal.createForeignKey(Zutatbeschraenkung.ZUTATBESCHRAENKUNG, DSL.name("zutatbeschraenkung_zutatnr_fkey"), new TableField[] { Zutatbeschraenkung.ZUTATBESCHRAENKUNG.ZUTATNR }, Keys.ZUTAT_PKEY, new TableField[] { Zutat.ZUTAT.ZUTATNR }, true);
    public static final ForeignKey<ZutateigenschaftRecord, EigenschaftenRecord> ZUTATEIGENSCHAFT__ZUTATEIGENSCHAFT_EIGENSCHAFTID_FKEY = Internal.createForeignKey(Zutateigenschaft.ZUTATEIGENSCHAFT, DSL.name("zutateigenschaft_eigenschaftid_fkey"), new TableField[] { Zutateigenschaft.ZUTATEIGENSCHAFT.EIGENSCHAFTID }, Keys.EIGENSCHAFTEN_PKEY, new TableField[] { Eigenschaften.EIGENSCHAFTEN.EIGENSCHAFTID }, true);
    public static final ForeignKey<ZutateigenschaftRecord, ZutatRecord> ZUTATEIGENSCHAFT__ZUTATEIGENSCHAFT_ZUTATNR_FKEY = Internal.createForeignKey(Zutateigenschaft.ZUTATEIGENSCHAFT, DSL.name("zutateigenschaft_zutatnr_fkey"), new TableField[] { Zutateigenschaft.ZUTATEIGENSCHAFT.ZUTATNR }, Keys.ZUTAT_PKEY, new TableField[] { Zutat.ZUTAT.ZUTATNR }, true);
}
